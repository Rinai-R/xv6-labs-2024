# Context switch
#
#   void swtch(struct context *old, struct context *new);
# 
# 保存当前的寄存器到 old 中，从 new 加载新的寄存器值。
# 在操作系统中，这个过程用于切换线程或进程的上下文。

.globl swtch      # 声明 swtch 为全局符号，便于其他文件调用。

swtch:            # 上下文切换的开始。

        # 保存当前寄存器的值到 old 结构中（通过 a0 传递）。
        # 这些寄存器保存的是当前执行上下文的信息。
        sd ra, 0(a0)    # 将返回地址寄存器 ra 保存到 old 中（偏移 0）。
        sd sp, 8(a0)    # 将栈指针 sp 保存到 old 中（偏移 8）。
        sd s0, 16(a0)   # 将寄存器 s0 保存到 old 中（偏移 16）。
        sd s1, 24(a0)   # 将寄存器 s1 保存到 old 中（偏移 24）。
        sd s2, 32(a0)   # 将寄存器 s2 保存到 old 中（偏移 32）。
        sd s3, 40(a0)   # 将寄存器 s3 保存到 old 中（偏移 40）。
        sd s4, 48(a0)   # 将寄存器 s4 保存到 old 中（偏移 48）。
        sd s5, 56(a0)   # 将寄存器 s5 保存到 old 中（偏移 56）。
        sd s6, 64(a0)   # 将寄存器 s6 保存到 old 中（偏移 64）。
        sd s7, 72(a0)   # 将寄存器 s7 保存到 old 中（偏移 72）。
        sd s8, 80(a0)   # 将寄存器 s8 保存到 old 中（偏移 80）。
        sd s9, 88(a0)   # 将寄存器 s9 保存到 old 中（偏移 88）。
        sd s10, 96(a0)  # 将寄存器 s10 保存到 old 中（偏移 96）。
        sd s11, 104(a0) # 将寄存器 s11 保存到 old 中（偏移 104）。

        # 从新的上下文（通过 a1 传递）中加载寄存器的值。
        # 这些寄存器值是我们要切换到的新线程或进程的上下文。
        ld ra, 0(a1)    # 将新的返回地址寄存器 ra 加载到当前上下文。
        ld sp, 8(a1)    # 将新的栈指针 sp 加载到当前上下文。
        ld s0, 16(a1)   # 将新的寄存器 s0 加载到当前上下文。
        ld s1, 24(a1)   # 将新的寄存器 s1 加载到当前上下文。
        ld s2, 32(a1)   # 将新的寄存器 s2 加载到当前上下文。
        ld s3, 40(a1)   # 将新的寄存器 s3 加载到当前上下文。
        ld s4, 48(a1)   # 将新的寄存器 s4 加载到当前上下文。
        ld s5, 56(a1)   # 将新的寄存器 s5 加载到当前上下文。
        ld s6, 64(a1)   # 将新的寄存器 s6 加载到当前上下文。
        ld s7, 72(a1)   # 将新的寄存器 s7 加载到当前上下文。
        ld s8, 80(a1)   # 将新的寄存器 s8 加载到当前上下文。
        ld s9, 88(a1)   # 将新的寄存器 s9 加载到当前上下文。
        ld s10, 96(a1)  # 将新的寄存器 s10 加载到当前上下文。
        ld s11, 104(a1) # 将新的寄存器 s11 加载到当前上下文。

        ret             # 返回，完成上下文切换，程序控制权转移到新的上下文。
